# Duowen Vaisra
config CPU_VAISRA
	bool
	select CPU_64G
	select CPU_SV39
	select CPU_SV48
	select CPU_PMP
	select CPU_COUNTERS

# SiFive E51
config CPU_E51
	bool
	select CPU_64I
	select CPU_M
	select CPU_A
	select CPU_C
	select CPU_COUNTERS
	select ARCH_HAS_NOSEE

# SiFive U54
config CPU_U54
	bool
	select CPU_64G
	select CPU_C
	select CPU_SV39
	select CPU_PMP
	select CPU_COUNTERS
	select ARCH_HAS_MMU_ORDER

# THead Xuantie C910
config CPU_C910
	bool
	select CPU_64G
	select CPU_C
	select CPU_V
	select CPU_SV39
	select CPU_PMP

# RI5CY
config CPU_RI5CY
	bool
	select CPU_32I
	select CPU_M
	select CPU_F
	select CPU_C
	select CPU_N
	select CPU_PMP
	select CPU_VIRQ
	select ARCH_HAS_PMU
	select ARCH_HAS_NOSEE
	select ARCH_HAS_RI5CY_FIRQ

config CPU_CV32E
	bool
	select CPU_RI5CY
	select ARCH_HAS_RI5CY_FIRQ_EXT

config CPU_CV64A
	bool
	select CPU_64G
	select CPU_C
	select CPU_SV39

# ZERO RISCY
config CPU_0RISCY
	bool
	select CPU_32I
	select CPU_32E
	select CPU_M
	select CPU_C
	select ARCH_HAS_NOSEE

# SPIKE32
config CPU_SPIKE32
	bool
	select CPU_32G
	select CPU_C
	select CPU_SV32
	select CPU_PMP

config CPU_SPIKE64
	bool
	select CPU_64G
	select CPU_C
	select CPU_SV39
	select CPU_SV48
	select CPU_PMP

# VIRT
config CPU_VIRT
	bool
	select CPU_64G
	select CPU_C
	select CPU_PMP
	select CPU_COUNTERS
	select CPU_SV39
	select CPU_SV48

config CPU_32G
	bool
	select CPU_32I
	select CPU_ZIFENCEI
	select CPU_ZICSR
	select CPU_M
	select CPU_A
	select CPU_F
	select CPU_D

config CPU_64G
	bool
	select CPU_64I
	select CPU_ZIFENCEI
	select CPU_ZICSR
	select CPU_M
	select CPU_A
	select CPU_F
	select CPU_D

config CPU_WMO
	bool

config CPU_32I
	bool

config CPU_64I
	bool

config CPU_32E
	bool

config CPU_128I
	bool

choice
	prompt "Base ISA"
	default RISCV_32I
	help
	  This selects the base ISA that this kernel will target and must match
	  the target platform.

config RISCV_WMO
	bool "Weak memory ordering (RVWMO)"
	depends CPU_WMO
	select 32BIT

config RISCV_32I
	bool "RV32I"
	depends CPU_32I
	select 32BIT

config RISCV_64I
	bool "RV64I"
	depends CPU_64I
	select 64BIT

config RISCV_32E
	bool "RV32E"
	depends CPU_32E
	select 32BIT

config RISCV_128I
	bool "RV128I"
	depends CPU_128I
	select 128BIT

endchoice

menu "ISA extensions"

config CPU_ZIFENCEI
	bool

config CPU_ZICSR
	bool

config CPU_M
	bool

config CPU_A
	bool
	select ARCH_HAS_SMP

config CPU_F
	bool
	select ARCH_HAS_FP

config CPU_D
	bool
	select CPU_F

config CPU_Q
	bool
	select CPU_D

config CPU_C
	bool

config CPU_ZTSO
	bool

config CPU_COUNTERS
	bool

config CPU_L
	bool

config CPU_B
	bool

config CPU_J
	bool

config CPU_T
	bool

config CPU_P
	bool

config CPU_V
	bool

config CPU_N
	bool

config CPU_ZAM
	bool

config CPU_H
	bool

config CPU_PMA
	bool

config CPU_PMP
	bool

config CPU_SV32
	bool
	depends 32BIT && RISCV_EXIT_S
	select ARCH_HAS_MMU

config CPU_SV39
	bool
	depends 64BIT && RISCV_EXIT_S
	select ARCH_HAS_MMU
	select ARCH_HAS_MMU_HUGE

config CPU_SV48
	bool
	depends 64BIT && RISCV_EXIT_S
	select ARCH_HAS_MMU
	select ARCH_HAS_MMU_HUGE

config CPU_VIRQ
	bool

config RISCV_M
	bool "Multiplication and division (M) support"
	depends CPU_M
	default y

config RISCV_A
	bool "Atomic instructions (A) support"
	depends CPU_A
	default y

config RISCV_F
	bool "Single-precision floating-point (F) support"
	depends CPU_F

config RISCV_D
	bool "Double-precision floating-point (D) support"
	depends CPU_D
	select RISCV_F

config RISCV_Q
	bool "Quad-precision floating-point (Q) support"
	depends CPU_Q
	select RISCV_D

config RISCV_L
	bool "Decimal floating-point (L) support"
	depends CPU_L

config RISCV_C
	bool "Compressed instructions (C) support"
	depends CPU_C
	default y

config RISCV_ZTSO
	bool "Total store ordering (TSO) support"
	depends CPU_ZTSO
	default y

config RISCV_COUNTERS
	bool "Performance counters and timer support"
	depends CPU_COUNTERS
	select MATH_DIV64
	default y

config RISCV_B
	bool "Bit manipulation (B) support"
	depends CPU_B
	default y

config RISCV_J
	bool "Dynamically translated languages (J) support"
	depends CPU_J

config RISCV_T
	bool "Transactional memory (T) support"
	depends CPU_T
	default y

config RISCV_P
	bool "Packed-SIMD instructions (P) support"
	depends CPU_P

config RISCV_V
	bool "Vector operations (V) support"
	depends CPU_V

config RISCV_N
	bool "User-level interrupts (N) support"
	depends CPU_N
	default y

config RISCV_ZAM
	bool "Misaligned atomics (Zam) support"
	depends CPU_ZAM
	default y

config RISCV_PMA
	bool "Physical address attributes (PMA) support"
	depends CPU_PMA
	default y

config RISCV_PMP
	bool "Physical address protection (PMP) support"
	depends CPU_PMP
	default y

config RISCV_H
	bool "Hypervisor extension support"
	depends CPU_H

menuconfig RISCV_SV
	bool "Supervisor virtual addresing"
	depends ARCH_HAS_MMU && !ARCH_HAS_NOSEE

if RISCV_SV

choice
	prompt "Virtual memory bit"

config RISCV_SV32
	bool "Sv32"
	depends CPU_SV32
	select ARCH_HAS_MMU_4K
	select ARCH_HAS_MMU_3L

config RISCV_SV39
	bool "Sv39"
	depends CPU_SV39
	select ARCH_HAS_MMU_4K
	select ARCH_HAS_MMU_3L

config RISCV_SV48
	bool "Sv48"
	depends CPU_SV48
	select ARCH_HAS_MMU_4K
	select ARCH_HAS_MMU_4L

endchoice

endif

config RISCV_VIRQ
	bool "Vectorized interrupt support"
	depends CPU_VIRQ

endmenu

menu "CPU architecture options"

if RISCV_A

choice
	prompt "Type of atomic counter"

config RISCV_ATOMIC_COUNT_32
	bool "signed 32-bit"
	select ARCH_HAS_BITS_PER_UNIT_32
	depends !SMP

config RISCV_ATOMIC_COUNT_64
	bool "signed 64-bit"
	select ARCH_HAS_BITS_PER_UNIT_64

endchoice

choice
	prompt "Type of SMP spinlock"
	default RISCV_SPINLOCK_RAW

config RISCV_SPINLOCK_RAW
	bool "Raw spinlock"
	help
	  May suffer from lock fairness, and dead locks due to cache
	  contension.

config RISCV_SPINLOCK_GENERIC
	bool "Queued spinlock"
	select ARCH_HAS_QSPINLOCK if SMP
	help
	  Alway fair, however, due to no awoswap 16-bit implementation,
	  consumes more memory for each spinlock_t.

endchoice

endif

endmenu

menu "Compiler options"

config CC_NO_RELAX
	bool "Disable link relaxation"

# We must be able to map all physical memory into the kernel, but the compiler
# is still a bit more efficient when generating code if it's setup in a manner
# such that it can only map 2GiB of memory.
choice
	prompt "Program code model (-mcmodel)"
	default CMODEL_MEDLOW if 32BIT
	default CMODEL_MEDANY if 64BIT

config CMODEL_MEDLOW
	bool "medium low code model"

config CMODEL_MEDANY
	bool "medium any code model"

endchoice

choice
	prompt "CPU Tuning"
	default TUNE_GENERIC

config TUNE_GENERIC
	bool "generic"

endchoice

choice
	prompt "Maximum Physical Memory"
	default MAXPHYSMEM_2GB if 32BIT
	default MAXPHYSMEM_2GB if 64BIT && CMODEL_MEDLOW
	default MAXPHYSMEM_128GB if 64BIT && CMODEL_MEDANY

config MAXPHYSMEM_2GB
	bool "2GiB"

config MAXPHYSMEM_128GB
	depends on 64BIT && CMODEL_MEDANY
	bool "128GiB"

endchoice

endmenu

config ARCH_HAS_NOSEE
	bool

config SYS_ENTR_M
	bool

config SYS_ENTR_S
	bool

config SYS_EXIT_M
	bool

config SYS_EXIT_S
	bool

config SYS_EXIT_U
	bool

choice
	prompt "Privileged software stack"
	default RISCV_AEE

config RISCV_AEE
	bool "AEE (Application)"
	help
	  Application execution environment.

config RISCV_SEE
	bool "SEE (Supervisor)"
	depends !ARCH_HAS_NOSEE

config RISCV_HEE
	bool "HEE (Hypervisor)"
	depends RISCV_H

endchoice

choice
	prompt "Entry priviledge level"

# Disabled for the firmware system
#config RISCV_ENTR_U
#	bool "U-Mode"

config RISCV_ENTR_S
	bool "S-Mode"
	depends SYS_ENTR_S

config RISCV_ENTR_M
	bool "M-Mode"
	depends SYS_ENTR_M

endchoice

choice
	prompt "Exit priviledge level"

# Disabled for the firmware system
config RISCV_EXIT_U
	bool "U-Mode"
	depends SYS_EXIT_U
	select RISCV_N if (CPU_N && !SYS_NOIRQ)

config RISCV_EXIT_S
	bool "S-Mode"
	depends SYS_EXIT_S

config RISCV_EXIT_M
	bool "M-Mode"
	depends SYS_EXIT_M

endchoice

config SYS_LOADER
	bool
	depends BOOTLOADER
	default y if RISCV_ENTR_M

config SYS_KERNEL
	bool
	depends !BOOTLOADER
	default y if RISCV_EXIT_S && (RISCV_SEE || RISCV_HEE)

config SYS_MONITOR
	bool
	depends !BOOTLOADER
	default y if RISCV_ENTR_M && (RISCV_SEE || RISCV_HEE)

menu "System peripherals"

config RISCV_IRQ_VERBOSE
	bool "Enable IRQ handler verbosity"
	depends SIMULATION && EXPERIMENTAL
	help
	  This is useful for IRQ testing.

config ARCH_HAS_HTIF
	bool

config HTIF
	bool "Host Target Interface (HTIF) support"
	depends ARCH_HAS_HTIF
	help
	  The interface can be found in spike (RISCV ISA simulator).

config ARCH_HAS_CLINT
	bool

config CLINT
	bool "Core Local Interruptor (CLINT) support"
	depends ARCH_HAS_CLINT
	select ARCH_HAS_SBI_IPI
	select ARCH_HAS_SBI_TIMER
	select MATH_DIV64

if CLINT

config CLINT_XCHG_LLSC
	bool "Use LL/SC style xchg"
	help
	  By default, CLINT driver uses amoswap to do IPI atomicity.
	  However, this doesn't work for all architectures. Enabling this
	  option allows the driver to switch to use LL/SC based xchg.
	  If unsure, say 'N'.

config CLINT_FORCE_FAST_TIMEOUT
	bool "Force Clint timer to use very shot timeout"
	help
	  On simulation environments, any timeout value may be too long
	  to be simulated. Select this option allows the driver to force
	  a small enough value for simulation.
	  If unsure, say 'N'.

endif

config ARCH_HAS_PLIC
	bool

config ARCH_HAS_PLIC_EOI_EARLY
	bool

config PLIC
	bool "Platform level interrupt controller (PLIC) support"
	depends ARCH_HAS_PLIC
	select ARCH_HAS_IRQC_ACK if !PLIC_COMPLETION

if PLIC

config PLIC_COMPLETION
	bool "Enable internal IRQ completion"
	depends ARCH_HAS_PLIC_EOI_EARLY
	help
	  By default, PLIC driver allows hardware drivers to invoke IRQ
	  completion as EOI indication. However, for realtime reasons,
	  PLIC driver may complete the IRQ in the IRQ context.
	  If unsure, say 'N'.

choice
	prompt "Internal completion timing"
	default PLIC_COMPLETION_EXIT

config PLIC_COMPLETION_ENTRY
	bool "IRQ entry"

config PLIC_COMPLETION_EXIT
	bool "IRQ exit"

endchoice

config PLIC_MASK_PRIORITY
	bool "Enable priority based IRQ masking"
	depends PLIC_COMPLETION
	select ARCH_HAS_IRQC_MASK
	help
	  By default, PLIC uses ENABLER based IRQ masking. This option
	  allows to use PRIORITYR based IRQ masking, at the cost that the
	  hardware drivers can only use the lowest priority - 1.
	  If unsure, say 'N'.

endif

config RI5CY_PC
	bool "RI5CY performance counter support"
	depends PERF && CPU_RI5CY

config ARCH_HAS_RI5CY_FIRQ
	bool

config ARCH_HAS_RI5CY_FIRQ_EXT
	bool
	select ARCH_HAS_RI5CY_FIRQ

menuconfig RI5CY_FIRQ
	bool "RI5CY fast interrupt support"
	depends ARCH_HAS_RI5CY_FIRQ

menuconfig RI5CY_FIRQ_EXT
	bool "RI5CY extended fast interrupt support"
	depends RI5CY_FIRQ && ARCH_HAS_RI5CY_FIRQ_EXT

endmenu
